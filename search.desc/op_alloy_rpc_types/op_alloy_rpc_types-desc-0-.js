searchState.loadedDescShard("op_alloy_rpc_types", 0, "op-alloy-rpc-types\nOP rollup config types.\nOP types for genesis data.\nNetwork RPC types\nOutput Types\nReceipt types for RPC\nContains the response for a safe head request.\nOp types related to sync.\nOptimism specific types related to transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Optimism-specific base fee specification.\nContainer type for all Optimism specific fields in a …\nThe Optimism-specific genesis block specification.\nBase fee information\nbedrock block number\ncanyon hardfork timestamp\necotone hardfork timestamp\nEIP-1559 denominator\nEIP-1559 denominator after canyon\nEIP-1559 elasticity\nExtracts the Optimism specific fields from a genesis file. …\nExtract the Optimism-specific genesis info from a genesis …\nExtracts the Optimism base fee info by looking for the …\nfjord hardfork timestamp\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenesis information\ngranite hardfork timestamp\nholocene hardfork timestamp\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nregolith hardfork timestamp\nConnection to the peer is possible but not currently …\nRecent attempts to connect to the peer failed, indicating …\nAn active, open connection to the peer exists.\nRepresents the connectivity state of a peer in a network, …\nDirection represents the direction of a connection.\nInbound is for when the remote peer initiated the …\nConnection to the peer is limited; may not have full …\nNo current connection to the peer, and no recent history …\nOutbound is for when the local peer initiated the …\nUnknown is the default direction when the direction is not …\n0: “<code>NotConnected</code>”, 1: “Connected”, 2: “<code>CanConnect</code>…\n0: “Unknown”, 1: “Inbound” (if the peer contacted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnanosecond\nAn output response for Optimism Rollup.\nA reference to the L2 block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe output root hash.\nThe state root.\nThe status of the node sync.\nThe output version.\nThe withdrawal storage root.\nL1 block info extracted from inout of first transaction in …\nOP Transaction Receipt type\nAdditional fields for Optimism transaction receipts: …\nDeposit nonce for deposit transactions.\nDeposit receipt version for deposit transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRegular eth transaction receipt including deposit receipts\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nL1 base fee scalar. Applied to base fee to compute …\nL1 blob base fee.\nL1 blob base fee scalar. Applied to blob base fee to …\nL1 block info of the transaction.\nL1 block info.\nL1 fee for the transaction.\nL1 fee scalar for the transaction\nSerialize/Deserialize l1FeeScalar to/from string\nL1 base fee is the minimum price per unit of gas.\nL1 gas used.\nThe safe head response.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe L1 block.\nThe safe head.\nThe block reference for an L1 block.\nThe block reference for an L2 block.\nThe <code>SyncStatus</code> of an Optimism Rollup Node.\nThe current L1 block.\nThe current L1 finalized block.\nThe finalized L1 block ref.\nThe finalized L2 block ref.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe block hash.\nThe block hash.\nThe L1 head block ref.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe L1 origin.\nThe block number.\nThe block number.\nThe parent hash.\nThe parent hash.\nThe pending safe L2 block ref.\nThe L1 safe head block ref.\nThe safe L2 block ref.\nThe sequence number.\nThe timestamp.\nThe timestamp.\nThe unsafe L2 block ref.\nThe transaction is missing a required field.\nThe transaction’s signature is missing.\nOptimism specific transaction fields\nBuilder for <code>OpTypedTransaction</code>.\nThe transaction’s signature could not be converted to …\nOP Transaction type\nErrors that can occur when converting a Transaction to an …\nThe transaction type is not supported.\nDeposit receipt version for deposit transactions …\nDeposit receipt version for deposit transactions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEthereum Transaction Types\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField indicating whether the transaction is a system …\nField indicating whether the transaction is a system …\nThe ETH value to mint on L2\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nHash that uniquely identifies the source of the deposit.\nBuilder for <code>OpTypedTransaction</code>.\nSets the access list for the transaction.\nBuilds <code>OpTypedTransaction</code> from this builder. See …\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nSets the gas limit for the transaction.\nSets the input data for the transaction.\nCalls <code>U::from(self)</code>.\nSets the maximum fee per gas for the transaction.\nSets the maximum priority fee per gas for the transaction.\nSets the nonce for the transaction.\nSets the recipient address for the transaction.\nSets the transactions type for the transactions.\nSets the value (amount) for the transaction.")