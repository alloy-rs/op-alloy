searchState.loadedDescShard("op_alloy", 0, "../../README.md\nList of all variants.\nIdentifier for an Optimism deposit transaction\nReceipt envelope with type flag 126, containing a deposit …\nOptimism Deposit transaction type.\nA <code>TxDeposit</code> tagged with type 0x7E.\nOptimism deposit transaction\nSource domains for deposit transactions.\nSource domain identifiers for deposit transactions.\nA trait representing a deposit transaction with specific …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nEIP-1559 transaction type.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nReceipt envelope with type flag 1, containing a EIP-2930 …\nEIP-2930 transaction type.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nReceipt envelope with type flag 4, containing a EIP-7702 …\nEIP-7702 transaction type.\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nOptimism Hardforks\nA L1 info deposit source.\nA L1 info deposit source.\nA L1 info deposit transaction source.\nReceipt envelope with no type flag.\nLegacy transaction type.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nAn Optimism block type.\nReceipt containing result of transaction execution.\n<code>OpDepositReceipt</code> with calculated bloom filter, modified …\nReceipt envelope, as defined in EIP-2718, modified for OP …\nThe Ethereum EIP-2718 Transaction Envelope, modified for …\nReceipt is the result of a transaction execution.\nOptimism <code>TransactionType</code> flags as specified in EIPs 2718, …\nThe TypedTransaction enum represents all Ethereum …\nDeposit transactions, also known as deposits are initiated …\nAn upgrade deposit source.\nAn upgrade deposit source.\nAn upgrade deposit transaction source.\nA user deposit source.\nA user deposit source.\nA deposit transaction source.\nReturns the <code>TxDeposit</code> variant if the transaction is a …\nReturns the deposit receipt if it is a deposit receipt.\nReturns the deposit receipt if it is a deposit receipt.\nReturns the <code>TxEip1559</code> variant if the transaction is an …\nReturns the <code>TxEip2930</code> variant if the transaction is an …\nReturns the <code>TxLegacy</code> variant if the transaction is a …\nReturn the inner receipt. Currently this is infallible, …\nReturn the receipt’s bloom.\nCalculates <code>Log</code>’s bloom filter. this is slow operation …\nBlock body.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nDecodes the inner TxDeposit fields from RLP bytes.\nReturn the inner deposit transaction if it exists.\nReturns the deposit nonce of the transaction.\nReturn the receipt’s deposit_nonce if it is a deposit …\nDeposit nonce for Optimism deposit transactions\nReturns the deposit receipt version of the transaction.\nReturn the receipt’s deposit version if it is a deposit …\nDeposit receipt version for Optimism deposit transactions\nConstructs the Ecotone network upgrade transactions.\nReturn the inner EIP-1559 transaction if it exists.\nReturn the inner EIP-2930 transaction if it exists.\nInner encoding function that is used for both rlp <code>Encodable</code>…\nOutput the length of the RLP signed transaction encoding.\nConstructs the Fjord network upgrade transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address of the sender account.\nCreates a new <code>OpReceiptEnvelope</code> from the given parts.\nThe gas limit for the L2 transaction.\nOP Stack Hardfork Transaction Updates\nBlock header.\nThe inner receipt type.\nGet the length of the inner receipt in the 2718 encoding.\nReturn the length of the inner txn, <strong>without a type byte</strong>.\nInput has two uses depending if transaction is Create or …\nThe intent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the structure, returning the receipt and the bloom …\nConsume the structure, returning only the receipt\nChecks if the transaction is a deposit transaction.\nReturns true if the transaction is a deposit transaction.\nReturns true if the transaction is an EIP-1559 transaction.\nReturns true if the transaction is an EIP-2930 transaction.\nReturns true if the transaction is a legacy transaction.\nReturn true if the transaction was successful.\nIndicates whether the transaction is exempt from the L2 …\nReturns true if the transaction is a system transaction.\nField indicating if this transaction is exempt from the L2 …\nThe L1 block hash.\nThe L1 block hash.\nReturn the inner legacy transaction if it exists.\nThe log index.\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt’s bloom.\nThe bloom filter.\nReturns the optional mint value of the deposit transaction.\nThe ETH value to mint on L2.\nCreate new OpDepositReceiptWithBloom\nCreates a new L1InfoDepositSource.\nCreates a new UserDepositSource.\nCreates a new UpgradeDepositSource.\nThe receipt.\nCalculate the length of the rlp payload of the network …\nThe sequence number.\nBincode-compatible serde implementations for consensus …\nReturns the signature for the optimism deposit …\nCalculates a heuristic for the in-memory size of the …\nReturns the hash that uniquely identifies the source of …\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nHash that uniquely identifies the source of the deposit.\nReturns the success status of the receipt’s transaction.\nThe address of the recipient account, or the null …\nReturn the <code>OpTxType</code> of the inner receipt.\nReturn the <code>OpTxType</code> of the inner txn.\nReturn the <code>OpTxType</code> of the inner txn.\nThe ETH value to send to the recipient account.\nCalculates the bloom filter for the receipt and returns …\nOptimism Hardforks\nModule containing a Transaction builder for the Ecotone …\nModule containing a Transaction builder for the Fjord …\nEIP-4788 From Address\nThe Enable Ecotone Input Method 4Byte Signature\nThe Gas Price Oracle Address This is computed by using …\nThe Gas Price Oracle Deployer Address\nL1 Block Deployer Address\nThe new L1 Block Address This is computed by using …\nThe UpdgradeTo Function Signature\nInput data for setting the Fjord Gas Price Oracle.\nFjord Gas Price Oracle address.\nThe Gas Price Oracle Address This is computed by using …\nFjord Gas Price Oracle Deployer Address.\nThe L1 Info Depositer Address.\nThe Set Fjord Four Byte Method Signature.\nBincode-compatible <code>super::TxDeposit</code> serde implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe set of network-specific contracts for a given chain.\nThe RollupConfig for Base Mainnet.\nGet the base fee parameters for Base Sepolia.\nThe RollupConfig for Base Sepolia.\nBase fee max change denominator for Base Sepolia as …\nBatcher update type\nA batcher update error.\nFailed to decode the batcher address argument from the …\nAn error for updating the batcher address on the …\nDefines core blockchain settings per block.\nChain genesis information.\nEIP-1559 parameters update type\nAn EIP-1559 parameter update error.\nThe max sequencer drift when the Fjord hardfork is active.\nFrontier chains are chains with customizations beyond the …\nThe channel timeout once the Granite hardfork is active.\nGas config update type\nA gas config update error.\nAn error for updating the gas config on the SystemConfig.\nGas limit update type\nA gas limit update error.\nFailed to decode the gas limit argument from the gas limit …\nAn error for updating the gas limit on the SystemConfig.\nHardfork configuration.\nInvalid data length.\nInvalid data length.\nInvalid data length.\nThe data length is invalid.\nThe data length is invalid.\nThe data length is invalid.\nThe data pointer is invalid.\nThe data pointer is invalid.\nThe data pointer is invalid.\nAn invalid system config update type.\nThe log topic is invalid.\nReceived an incorrect number of log topics.\nFailed to decode the data length argument from the batcher …\nFailed to decode the data length argument from the gas …\nFailed to decode the data length argument from the gas …\nAn error occurred while processing the update log.\nAn error occurred while processing the update log.\nThe max rlp bytes per channel for the Bedrock hardfork.\nThe max rlp bytes per channel for the Fjord hardfork.\nGet the base fee parameters for Optimism Mainnet.\nThe RollupConfig for OP Mainnet.\nGet the base fee parameters for Optimism Sepolia.\nThe RollupConfig for OP Sepolia.\nBase fee max change denominator for Optimism Sepolia as …\nBase fee max change denominator for Optimism Sepolia as …\nBase fee max change denominator for Optimism Sepolia as …\nOptimism Base Fee Configuration\nFailed to decode the overhead argument from the gas config …\nFailed to decode the data pointer argument from the …\nFailed to decode the data pointer argument from the gas …\nFailed to decode the data pointer argument from the gas …\nThe Rollup configuration.\nFailed to decode the scalar argument from the gas config …\nStandard chains don’t have any customizations beyond the …\nLevel of integration with the superchain.\nSystem accounts\nSystem configuration.\nAn error for processing the SystemConfig update log.\nRepresents type of update to the system config.\nUnsafe block signer update type\nThe config update log version is unsupported.\nFailed to decode the update type from the config update …\nThe address manager\nAddress Types\nAddresses\nAlternative DA configuration\nAnchor State Registry Proxy address\nReturns the inner BaseFeeParams.\nReturns the BaseFeeParams for the canyon hardfork.\nThe address that can deposit attributes\nThe address of the attributes predeploy\nReturns the BaseFeeParams for the given chain id.\nBase Fee Params\nBase fee scalar value\nChain-specific batch inbox address\n<code>batch_inbox_address</code> is the L1 address that batches are …\nBatcher address\nBlob base fee scalar value\n<code>blobs_enabled_l1_timestamp</code> is the timestamp to start …\nThe block time in seconds.\nThe block time of the L2, in seconds.\nBase fee params post-canyon hardfork\nCanyon hardfork activation time\n<code>canyon_time</code> sets the activation time of the Canyon network …\nChain Config Types\nChain is a simple string to identify the chain, within its …\nChain ID\nThe challenger’s address\nReturns the channel timeout for the given timestamp.\nNumber of L1 blocks between when a channel can be opened …\nChecks the scalar value in Ecotone.\n<code>da_challenge_address</code> is the L1 address that the data …\nData availability type.\nDelayed WETH Proxy address\nDelta hardfork activation time\n<code>delta_time</code> sets the activation time of the Delta network …\n<code>deposit_contract_address</code> is the L1 address that deposits …\nDispute Game Factory Proxy address\nEcotone hardfork activation time\n<code>ecotone_time</code> sets the activation time of the Ecotone …\nEIP 1559 Denominator\nEIP-1559 denominator\nEIP 1559 Denominator for the Canyon hardfork\nEIP 1559 Elasticity Parameter\nEIP-1559 elasticity\nReturns the eip1559 parameters from a SystemConfig encoded …\nChain explorer HTTP endpoint\nFault Dispute Game Proxy address\nThe address of the fee vault\nFjord hardfork activation time\n<code>fjord_time</code> sets the activation time of the Fjord network …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the RollupConfig for the given L2 chain ID.\nGas limit value\nGas paying token metadata. Not consumed by downstream …\nGenesis types.\nChain-specific genesis information\nThe genesis state of the rollup.\nThe channel timeout after the Granite hardfork.\nGranite hardfork activation time\n<code>granite_time</code> sets the activation time for the Granite …\nThe guardian address\nHardfork Configuration. These values may override the …\nHolocene hardfork activation time\n<code>holocene_time</code> sets the activation time for the Holocene …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if a DA Challenge proxy Address is provided …\nReturns true if Canyon is active at the given timestamp.\nReturns true if Delta is active at the given timestamp.\nReturns true if Ecotone is active at the given timestamp.\nReturns true if Fjord is active at the given timestamp.\nReturns true if Granite is active at the given timestamp.\nReturns true if Holocene is active at the given timestamp.\nReturns true if Regolith is active at the given timestamp.\nL1 genesis block\nL1 chain ID\nThe L1 chain ID\nL1 Cross Domain Messenger proxy address\nL1 ERC721 Bridge proxy address\nL1 Standard Bridge proxy address\n<code>l1_system_config_address</code> is the L1 address that the system …\nL2 genesis block\nThe L2 chain ID\nL2 Output Oracle Proxy address\nTimestamp of the L2 genesis block\nLoads the rollup config for the OP-Stack chain given the …\nReturns the max rlp bytes per channel for the given …\nReturns the max sequencer drift for the given timestamp.\nThe maximum sequencer drift in seconds.\nSequencer batches may not be more than MaxSequencerDrift …\nMIPS Proxy address\nChain name (e.g. “Base”)\nOptimism configuration\nOptimism Mintable ERC20 Factory Proxy address\nOptimism Portal Proxy address\nFee overhead value\nModule containing fee parameters.\nPermissioned Dispute Game Proxy address\nPreimage Oracle Proxy address\n<code>protocol_versions_address</code> is the L1 address that the …\nProxy Admin address\nThe owner of the Proxy Admin\nChain public RPC endpoint\n<code>regolith_time</code> sets the activation time of the Regolith …\nRollup Config Types\nReturns the rollup config for the given chain ID.\nFee scalar value\nThe sequencer window size in seconds.\nThe sequencer window size.\nChain sequencer RPC endpoint\nSet missing hardfork configurations to the defaults, if …\nToggles standard chain validation checks on for this …\nSuperchain is a simple string to identify the superchain. …\nThe superchain config address.\nLevel of integration with the superchain.\nTime of when a given chain is opted in to the Superchain. …\nSystem Config Type\nOptional System configuration\nThe system config owner\nSystem Config Proxy address\nFilters all L1 receipts to find config updates and applies …\nSets zeroed addresses to <code>Option::None</code>.\nThe set of network-specific contracts for a given chain.\nThe address manager\nAnchor State Registry Proxy address\nThe challenger’s address\nDelayed WETH Proxy address\nDispute Game Factory Proxy address\nFault Dispute Game Proxy address\nThe guardian address\nL1 Cross Domain Messenger proxy address\nL1 ERC721 Bridge proxy address\nL1 Standard Bridge proxy address\nL2 Output Oracle Proxy address\nMIPS Proxy address\nOptimism Mintable ERC20 Factory Proxy address\nOptimism Portal Proxy address\nPermissioned Dispute Game Proxy address\nPreimage Oracle Proxy address\nProxy Admin address\nThe owner of the Proxy Admin\nThe system config owner\nSystem Config Proxy address\nAltDA configuration.\nDefines core blockchain settings per block.\nFrontier chains are chains with customizations beyond the …\nHardfork configuration.\nStandard chains don’t have any customizations beyond the …\nLevel of integration with the superchain.\nAddresses\nAlternative DA configuration\nChain-specific batch inbox address\nThe block time in seconds.\nCanyon hardfork activation time\nChain is a simple string to identify the chain, within its …\nChain ID\nAltDA challenge address\nAltDA challenge window time (in seconds)\nAltDA resolution window time (in seconds)\nData availability type.\nDelta hardfork activation time\nEcotone hardfork activation time\nChain explorer HTTP endpoint\nFjord hardfork activation time\nReturns the argument unchanged.\nGas paying token metadata. Not consumed by downstream …\nChain-specific genesis information\nGranite hardfork activation time\nHardfork Configuration. These values may override the …\nHolocene hardfork activation time\nCalls <code>U::from(self)</code>.\nL1 chain ID\nThe maximum sequencer drift in seconds.\nChain name (e.g. “Base”)\nOptimism configuration\nChain public RPC endpoint\nThe sequencer window size in seconds.\nChain sequencer RPC endpoint\nToggles standard chain validation checks on for this …\nSuperchain is a simple string to identify the superchain. …\nLevel of integration with the superchain.\nTime of when a given chain is opted in to the Superchain. …\nChain genesis information.\nL1 genesis block\nL2 genesis block\nTimestamp of the L2 genesis block\nOptional System configuration\nGet the base fee parameters for Base Sepolia.\nBase fee max change denominator for Base Sepolia as …\nGet the base fee parameters for Optimism Mainnet.\nBase fee max change denominator for Optimism Mainnet as …\nBase fee max change denominator for Optimism Mainnet as …\nBase fee max change denominator for Optimism Mainnet as …\nGet the base fee parameters for Optimism Sepolia.\nBase fee max change denominator for Optimism Sepolia as …\nBase fee max change denominator for Optimism Sepolia as …\nBase fee max change denominator for Optimism Sepolia as …\nOptimism Base Fee Configuration\nReturns the BaseFeeParams for the given chain id.\nEIP 1559 Denominator\nEIP 1559 Denominator for the Canyon hardfork\nEIP 1559 Elasticity Parameter\nThe RollupConfig for Base Mainnet.\nThe RollupConfig for Base Sepolia.\nThe max sequencer drift when the Fjord hardfork is active.\nThe channel timeout once the Granite hardfork is active.\nThe max rlp bytes per channel for the Bedrock hardfork.\nThe max rlp bytes per channel for the Fjord hardfork.\nThe RollupConfig for OP Mainnet.\nThe RollupConfig for OP Sepolia.\nThe Rollup configuration.\nBase Fee Params\n<code>batch_inbox_address</code> is the L1 address that batches are …\n<code>blobs_enabled_l1_timestamp</code> is the timestamp to start …\nThe block time of the L2, in seconds.\nBase fee params post-canyon hardfork\n<code>canyon_time</code> sets the activation time of the Canyon network …\nNumber of L1 blocks between when a channel can be opened …\n<code>da_challenge_address</code> is the L1 address that the data …\n<code>delta_time</code> sets the activation time of the Delta network …\n<code>deposit_contract_address</code> is the L1 address that deposits …\n<code>ecotone_time</code> sets the activation time of the Ecotone …\n<code>fjord_time</code> sets the activation time of the Fjord network …\nThe genesis state of the rollup.\nThe channel timeout after the Granite hardfork.\n<code>granite_time</code> sets the activation time for the Granite …\n<code>holocene_time</code> sets the activation time for the Holocene …\nThe L1 chain ID\n<code>l1_system_config_address</code> is the L1 address that the system …\nThe L2 chain ID\nSequencer batches may not be more than MaxSequencerDrift …\n<code>protocol_versions_address</code> is the L1 address that the …\n<code>regolith_time</code> sets the activation time of the Regolith …\nReturns the rollup config for the given chain ID.\nThe sequencer window size.\nThe superchain config address.\nBatcher update type\nA batcher update error.\nFailed to decode the batcher address argument from the …\nAn error for updating the batcher address on the …\nThe initial version of the system config event log.\n<code>keccak256(&quot;ConfigUpdate(uint256,uint8,bytes)&quot;)</code>\nFailed to decode the eip1559 params argument from the eip …\nAn error for updating the EIP-1559 parameters on the …\nEIP-1559 parameters update type\nAn EIP-1559 parameter update error.\nGas config update type\nA gas config update error.\nAn error for updating the gas config on the SystemConfig.\nGas limit update type\nA gas limit update error.\nFailed to decode the gas limit argument from the gas limit …\nAn error for updating the gas limit on the SystemConfig.\nInvalid data length.\nInvalid data length.\nInvalid data length.\nInvalid data length.\nThe data length is invalid.\nThe data length is invalid.\nThe data length is invalid.\nThe data length is invalid.\nThe data pointer is invalid.\nThe data pointer is invalid.\nThe data pointer is invalid.\nThe data pointer is invalid.\nAn invalid system config update type.\nThe log topic is invalid.\nReceived an incorrect number of log topics.\nFailed to decode the data length argument from the batcher …\nFailed to decode the data length argument from the gas …\nFailed to decode the data length argument from the gas …\nFailed to decode the data length argument from the eip …\nAn error occurred while processing the update log.\nAn error occurred while processing the update log.\nFailed to decode the overhead argument from the gas config …\nFailed to decode the data pointer argument from the …\nFailed to decode the data pointer argument from the gas …\nFailed to decode the data pointer argument from the gas …\nFailed to decode the data pointer argument from the eip …\nFailed to decode the scalar argument from the gas config …\nSystem accounts\nSystem configuration.\nAn error for processing the SystemConfig update log.\nRepresents type of update to the system config.\nUnsafe block signer update type\nThe config update log version is unsupported.\nFailed to decode the update type from the config update …\nThe address that can deposit attributes\nThe address of the attributes predeploy\nBase fee scalar value\nBatcher address\nBlob base fee scalar value\nEIP-1559 denominator\nEIP-1559 elasticity\nThe address of the fee vault\nReturns the argument unchanged.\nGas limit value\nCalls <code>U::from(self)</code>.\nFee overhead value\nFee scalar value\nTypes for a catch-all network.\nTransaction type for a catch-all network.\nBlock JSON-RPC response.\nThe JSON body of a block response.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA wallet capable of signing any transaction for the …\nHeader type\nThe network header type.\nHeader JSON-RPC response.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA wallet capable of signing any transaction for the given …\nContains the success value\nTypes for an Op-stack network.\nThe network receipt envelope type.\nReceipt JSON-RPC response.\nThe JSON body of a transaction receipt.\nSigner error.\nTransaction type\nA Transaction builder for a network.\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction JSON-RPC response. Aggregates transaction data …\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nApply a function to the builder, returning the modified …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nEIP-7702 Authorization list.\nGet the EIP-7702 authorization list for the transaction.\nBase fee per unit of gas (If EIP-1559 is supported)\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCoinbase/Miner of the block\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nInstantiate a custom error.\nGet the default signer.\nGet the default signer address. This address should be used\nDifficulty of the block\nEffective gas price.\nEIP-2718 traits.\nThe error that occurred.\nExtra data\nAddress of the sender.\nSender of the transaction\nGet the sender for the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gas limit for the transaction.\nGas limit of the block\nGet the legacy gas price for the transaction.\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nReturn true if the signer contains a credential for the …\nBlock hash\nBlock header\nGet the input data for the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the <code>to</code> field to a create call.\nConvert the error into an unbuilt transaction error.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nGet the max priority fee per gas for the transaction.\nMix hash of the block\nCreate a new signer with the given signer as the default …\nBlob fee for the next block (if EIP-4844 is supported)\nGet the nonce for the transaction.\nBlock number\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nThe original request that failed to build.\nSets the EIP-2930 access list.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the signer for the given address.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nBlock timestamp\nAddress of the receiver.\nRecipient of the transaction. Returns <code>None</code> if transaction …\nGet the recipient for the transaction.\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nHash of the transaction\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nEncode the transaction according to EIP-2718 rules. First …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie. This …\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nBlock JSON-RPC response.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nHeader type\nHeader JSON-RPC response.\nReceipt JSON-RPC response.\nTransaction type\nTransaction JSON-RPC response. Aggregates transaction data …\nSpecial case for uncle response.\nFallibly cast to a slice of hashes.\nFallibly cast to a slice of transactions.\nEIP-7702 Authorization list.\nBase fee per unit of gas (If EIP-1559 is supported)\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nCoinbase/Miner of the block\nAddress of the created contract, or <code>None</code> if the …\nConverts <code>self</code> into <code>Hashes</code>.\nReturns the cumulative gas used at this receipt.\nDifficulty of the block\nEffective gas price.\nExtra data\nAddress of the sender.\nSender of the transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas limit of the block\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nBlock hash\nReturns an iterator over references to the transaction …\nBlock header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into <code>Hashes</code>.\nReturns an iterator over the transactions (if any). This …\nWhether the block has no transactions.\nReturns true if the enum variant is used for full …\nCheck if the enum variant is used for hashes.\nReturns true if the enum variant is used for an uncle …\nReturns an iterator over the transaction hashes.\nReturns the number of transactions.\nMax BaseFeePerGas the user is willing to pay. For …\nMix hash of the block\nBlob fee for the next block (if EIP-4844 is supported)\nBlock number\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nBlock timestamp\nAddress of the receiver.\nRecipient of the transaction. Returns <code>None</code> if transaction …\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nHash of the transaction\nReturns an iterator over the transactions (if any). This …\nReturns an instance of BlockTransactions with the Uncle …\nThe batch is valid and should be processed\nError decoding an Alloy RLP\nA Batch.\nAn error decoding a batch.\nBatchTransaction is a set of Frames that can be Into::into …\nThe Batch Type.\nDescribes the functionality of a data source that fetches …\nBatch Validity\nA batch with its inclusion block.\nA Bedrock L1 info transaction\nThe bit field is too long\nFailed to decode block count\nBlock Header Info\nFailed to decode the L1BlockInfoTx from the deposit …\nFailed to decode block tx counts\nCHANNEL_ID_LENGTH is the length of the channel ID.\nA Channel is a set of batches that are split into at least …\nThe channel is closed.\nAn error returned when adding a frame to a channel.\nChannelId is an opaque identifier for a channel.\nDeposit event abi hash.\nThe version of the derivation pipeline.\nFrame data length mismatch.\nThe frame data is too large.\nThe frame data is too short.\nDecoding errors\nAn op_alloy_consensus::TxDeposit validation error.\nSource domains for deposit transactions.\nSource domain identifiers for deposit transactions.\nThe batch is invalid now and in the future, unless we …\nAn Ecotone L1 info transaction\nEIP-1559 transaction data.\nEIP-1559 parameter decoding error.\nEIP-2930 transaction data.\nEmpty buffer\nEmpty Span Batch\nEmpty transactions.\nThe error type for the BatchValidationProvider.\nFJORD_MAX_RLP_BYTES_PER_CHANNEL is the maximum amount of …\nCount the tagging info as 200 in terms of buffer size.\nThe first payload transaction is not a deposit transaction.\nA channel frame is a segment of a channel’s data.\nThe frame number is beyond the end frame.\nA frame decoding error.\nError parsing the frame data.\nThe frame id does not match the channel id.\nAn iterator over encoded frames.\nThe frame number is already in the channel.\nFrame parsing error.\nAn error that can occur when converting an OpBlock to an …\nFailed to decode the <code>from</code> field of the deposit event (the …\nThe batch may be valid, but cannot be processed yet and …\nFailed to decode the deposit gas value.\nIncomplete opaqueData slice header (incomplete length).\nError decoding the frame data length.\nThe genesis block hash does not match the expected value.\nInvalid genesis hash.\nError decoding the frame id.\nError decoding the frame number.\nInvalid opaque data content length.\nInvalid opaque data content offset.\nInvalid deposit event selector. Expected: B256 (deposit …\nInvalid transaction data\nInvalid transaction signature\nInvalid transaction type\nInvalid transaction type.\nAn invalid deposit version.\nRepresents the fields within a Bedrock L1 block info …\nRepresents the fields within an Ecotone L1 block info …\nThe L1BlockInfoTx enum contains variants for the different …\nA L1 info deposit source.\nA L1 info deposit source.\nA L1 info deposit transaction source.\nL1 Info error\nFailed to decode L1 origin check\nFailed to decode L1 origin number\nL2 Block Header Info\nLegacy transaction data.\nFrames cannot be larger than 1MB.\nMAX_RLP_BYTES_PER_CHANNEL is the maximum amount of bytes …\nMAX_SPAN_BATCH_ELEMENTS is the maximum number of blocks, …\nFailed to decode the deposit mint value.\nThe L2 block is missing the L1 info deposit transaction.\nMissing L1 origin\nMissing system config in genesis block.\nNo frames to parse.\nNo frames decoded.\nAn error encountered during OpBlock conversion.\nOpaque data length exceeds the deposit log event data …\nOpaque data with padding exceeds the specified data length.\nFailed to decode parent check\nIntroduced in Holocene, a special variant of the <code>Drop</code> …\nRaw Span Batch\nFailed to decode relative timestamp\nThe single batch type identifier.\nThe span batch type identifier.\nSingle Batch.\nA single batch\nRepresents a single batch: a single encoded L2 block\nSpan Batch.\nSpan Batches\nThe span batch contains the input to build a span of L2 …\nType for span batch bits.\nThe transaction data for an EIP-1559 transaction within a …\nThe transaction data for an EIP-2930 transaction within a …\nA single batch element is similar to the SingleBatch type …\nSpan Batch Errors\nError decoding a span batch\nThe transaction data for a legacy transaction within a …\nSpan Batch Payload\nSpan Batch Prefix\nThe typed transaction data for a transaction within a span …\nThis struct contains the decoded information for …\nDecoding Error\nFailed to decode the <code>to</code> field of the deposit event (the …\nThe span batch is too big\nFailed to decode the first transaction into an OpTxEnvelope…\nFailed to decode transaction nonces\nMismatch in length between the transaction type and …\nThe log data is not aligned to 32 bytes.\nWe are lacking L1 information until we can proceed batch …\nUnexpected opaque data length\nUnexpected number of deposit event log topics.\nThe first payload transaction has an unexpected type.\nUnsupported derivation version.\nAn upgrade deposit source.\nAn upgrade deposit source.\nAn upgrade deposit transaction source.\nA user deposit source.\nA user deposit source.\nA deposit transaction source.\nAccess list, used to pre-warm storage slots through static …\nAccess list, used to pre-warm storage slots through static …\nAdd a frame to the channel.\nAdd raw transactions into the SpanBatchTransactions.\nAppend a SingleBatch to the SpanBatch. Updates the L1 …\nThe current L1 origin block’s basefee\nThe current L1 origin block’s basefee\nThe fee scalar for L1 data\nThe batch\nReturns the batcher address for the info transaction\nThe address of the batch submitter\nThe address of the batch submitter\nList of block input in derived form\nCalculates the bit length of the SpanBatchBits bitfield.\nThe current blob base fee on L1\nThe fee scalar for L1 blobspace data\nReturns the OpBlock for a given number.\nNumber of L2 block in the span\nReturns the block hash for the L1BlockInfoTx.\nThe current L1 origin block’s hash\nThe current L1 origin block’s hash\nThis module contains the L1BlockInfoTx type, and various …\nThe base BlockInfo\nList of transaction counts for each L2 block\nCaching - block tx counts\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nChain ID\nValidates the batch can be applied on top of the specified …\nChecks if the span batch is valid.\nChecks if the batch is valid.\nChecks the validity of the batch’s prefix.\nValidate the batch timestamp.\nChecks if the first 20 bytes of the given hash match the …\nChecks if the first 20 bytes of the given hash match the …\nThe contract creation bits, standard span-batch bitlist.\nReturns the number of contract creation transactions in …\nTransaction calldata.\nTransaction calldata.\nTransaction calldata.\nThe data within the frame.\nCalculate the data gas for posting the transaction on L1.\nCalculate the data gas for posting the transaction on L1.\nCalculate the data gas for posting the transaction on L1.\nAttempts to decode a batch from a reader.\nDecodes the RawSpanBatch from a reader.]\nDecodes a standard span-batch bitlist from a reader. The …\nDecodes the SpanBatchTransactions from a reader.\nDecode a frame from a byte vector.\nDecode a block count from a reader.\nDecode block transaction counts from a reader.\nDecodes the L1BlockInfoEcotone object from ethereum …\nDecodes the L1BlockInfoBedrock object from ethereum …\nDecodes the L1BlockInfoEcotone object from ethereum …\nDecode the contract creation bits from a reader.\nDerives a deposit transaction from an EVM log event …\nDecodes the L1 origin check from a reader.\nDecodes the L1 origin number from a reader.\nDecodes the origin bits from a reader.\nDecodes the parent check from a reader.\nDecodes a SpanBatchPayload from a reader.\nDecodes a SpanBatchPrefix from a reader.\nDecode the protected bits from a reader.\nDecodes the relative timestamp from a reader.\nDecode the transaction data from a reader.\nDecode the transaction gas limits from a reader.\nDecode the transaction nonces from a reader.\nDecode the transaction signatures from a reader (excluding …\nDecode the <code>to</code> addresses of the transactions from a reader.\nDecode transactions from a reader.\nDecodes a typed transaction into a SpanBatchTransactionData…\nDecode the y parity bits from a reader.\nContains deposit transaction types and helper methods.\nConverts a RawSpanBatch into a SpanBatch, which has a list …\nEncodes the RawSpanBatch into a writer.\nEncodes a standard span-batch bitlist. The bitlist is …\nEncodes the SpanBatchTransactions into a writer.\nEncode the frame into a byte vector.\nEncode the block count into a writer.\nEncode the block transaction counts into a writer.\nEncodes the L1BlockInfoTx object into Ethereum transaction …\nEncodes the L1BlockInfoBedrock object into Ethereum …\nEncodes the L1BlockInfoEcotone object into Ethereum …\nEncode the contract creation bits into a writer.\nEncode the origin bits into a writer.\nEncodes a SpanBatchPayload into a writer.\nEncodes the SpanBatchPrefix into a writer.\nEncode the protected bits into a writer.\nEncode the transaction data into a writer.\nEncode the transaction gas limits into a writer.\nEncode the transaction nonces into a writer.\nEncode the transaction signatures into a writer (excluding …\nEncode the <code>to</code> addresses of the transactions into a writer.\nEncode the transactions into a writer.\nEncode the y parity bits into a writer.\nReturns the BlockNumHash of the batch.\nThe block hash of the first L1 block in the epoch\nThe epoch number of the L1 block\nThe batch epoch number. Same as the first L1 block number …\nThis module contains the L1 block fee calculation function.\nReturns the final timestamp for the last batch in the span.\nReturns all of the channel’s Frames concatenated …\nThe frames in the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an L2BlockInfo from a given OpBlock and …\nRetrieve all of the raw transactions from the …\nThe gas price of the transaction.\nThe gas price of the transaction.\nGenesis block timestamp\nReturns the batch type\nGet a bit from the SpanBatchBits bitlist.\nConverts all SpanBatchElements after the L2 safe head to …\nIf any transactions are empty or deposited transaction …\nThe block hash\nReturns the block ID.\nReturns the current ChannelId for the channel.\nReturns the L1 BlockNumHash for the info transaction.\nThe unique idetifier for the frame.\nThe inclusion block\nThe intent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the batch is accepted.\nReturns whether the batch is dropped.\nReturns if the channel is empty.\nReturns if the transaction has reached the max frame count.\nReturns whether the batch is future.\nWhether or not the frame is the last in the sequence.\nReturns whether the batch is outdated.\nChecks if the signature of the passed TxEnvelope is …\nReturns <code>true</code> if the channel is ready to be read.\nThe L1 block hash.\nThe L1 block hash.\nReturns the L1 fee overhead for the info transaction. …\nThe fee overhead for L1 data\nThe fee scalar for L1 data\nThe L1 origin BlockNumHash\nFirst 20 bytes of the last block’s L1 origin hash\nFirst 20 bytes of the last block’s L1 origin hash\nL1 origin number\nReturns the L2BlockInfo given a block number.\nTotal legacy transaction count in the span batch.\nReturns the number of frames ingested.\nThe log index.\nMaximum fee per gas.\nMaximum priority fee per gas.\nCreates a new batch with inclusion block.\nCreates a new span batch bits.\nInstantiates a new BlockInfo.\nInstantiates a new L2BlockInfo.\nCreates a new Frame.\nCreates a new FrameIter.\nCreate a new Channel with the given ChannelId and BlockInfo…\nCreates a new UserDepositSource.\nCreates a new L1InfoDepositSource.\nCreates a new UpgradeDepositSource.\nThe block number\nThe number of the frame.\nThe current L1 origin block number\nThe current L1 origin block number\nReturns the block number of the L1 block that contained …\nStandard span-batch bitlist of blockCount bits. Each bit …\nCaching - origin bits\nFirst 20 bytes of the first block’s parent hash\nFirst 20 bytes of the first block’s parent hash\nBlock hash of the previous L2 block. <code>B256::ZERO</code> if it has …\nThe parent block hash\nParses a single frame from the given data at the given …\nParse the on chain serialization of frame(s) in an L1 …\nThe span batch payload\nThe span batch prefix\nThe protected bits, standard span-batch bitlist.\nReads transaction data from a reader.\nRecover the <code>v</code> values of the transaction signatures.\nRelative timestamp of the first block\nThe sequence number of the L2 block\nThe sequence number.\nReturns the sequence number for the info transaction\nThe current sequence number\nThe current sequence number\nSets a bit in the SpanBatchBits bitlist.\nReturns the size of the transaction.\nCalculates the size of the frame + overhead for storing …\nReturns the estimated size of the channel including Frame …\nThe size of the potential transaction.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nReturns the epoch number for the first batch in the span.\nReturns the starting timestamp for the first batch in the …\nReturns if the given <code>value</code> is a deposit transaction.\nTest utilities for the protocol crate.\nThe current L1 origin block’s timestamp\nThe current L1 origin block’s timestamp\nReturns the timestamp for the batch.\nThe timestamp of the L2 block\nThe L2 block timestamp of this batch\nThe block timestamp\nReturns the BatchTransaction as a Bytes.\nConverts the SpanBatchTransactionData into a OpTxEnvelope.\nConverts SpanBatchLegacyTransactionData into a OpTxEnvelope…\nConverts SpanBatchEip1559TransactionData into an …\nConverts SpanBatchEip2930TransactionData into a …\nConverts the OpBlock to a partial SystemConfig.\nThe total number of transactions in a span batch. Must be …\nThe transactions in the L2 block\nThe L2 block transactions in this batch\nCreates a new L1BlockInfoTx from the given information.\nCreates a new L1BlockInfoTx from the given information and …\nThe transaction data.\nThe transaction gas limits.\nThe transaction nonces\nThe transaction signatures.\nThe <code>to</code> addresses of the transactions.\nReturns the transaction type of the …\nThe types of the transactions.\nTransactions encoded in SpanBatch specs\nCaching - span batch txs\nThe ETH value of the transaction.\nThe ETH value of the transaction.\nThe ETH value of the transaction.\nThe y parity bits, standard span-batch bitlist.\nFailed to parse the base fee scalar.\nA Bedrock L1 info transaction\nAn error type for parsing L1 block info transactions.\nAn Ecotone L1 info transaction\nFailed to parse the EIP-1559 denominator.\nFailed to parse the EIP-1559 elasticity parameter.\nFailed to parse the L1 blob base fee scalar.\nRepresents the fields within a Bedrock L1 block info …\nRepresents the fields within an Ecotone L1 block info …\nThe L1BlockInfoTx enum contains variants for the different …\nThe current L1 origin block’s basefee\nThe current L1 origin block’s basefee\nThe fee scalar for L1 data\nThe address of the batch submitter\nThe address of the batch submitter\nThe current blob base fee on L1\nThe fee scalar for L1 blobspace data\nThe current L1 origin block’s hash\nThe current L1 origin block’s hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fee overhead for L1 data\nThe fee scalar for L1 data\nThe current L1 origin block number\nThe current L1 origin block number\nThe current sequence number\nThe current sequence number\nThe current L1 origin block’s timestamp\nThe current L1 origin block’s timestamp\nDeposit log event abi signature.\nDeposit event abi hash.\nThe initial version of the deposit event log.\nAn op_alloy_consensus::TxDeposit validation error.\nSource domains for deposit transactions.\nSource domain identifiers for deposit transactions.\nFailed to decode the <code>from</code> field of the deposit event (the …\nFailed to decode the deposit gas value.\nIncomplete opaqueData slice header (incomplete length).\nInvalid opaque data content length.\nInvalid opaque data content offset.\nInvalid deposit event selector. Expected: B256 (deposit …\nAn invalid deposit version.\nA L1 info deposit source.\nA L1 info deposit source.\nA L1 info deposit transaction source.\nFailed to decode the deposit mint value.\nOpaque data length exceeds the deposit log event data …\nOpaque data with padding exceeds the specified data length.\nFailed to decode the <code>to</code> field of the deposit event (the …\nThe log data is not aligned to 32 bytes.\nUnexpected opaque data length\nUnexpected number of deposit event log topics.\nAn upgrade deposit source.\nAn upgrade deposit source.\nAn upgrade deposit transaction source.\nA user deposit source.\nA user deposit source.\nA deposit transaction source.\nDerives a deposit transaction from an EVM log event …\nThe intent.\nThe L1 block hash.\nThe L1 block hash.\nThe log index.\nThe sequence number.\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the data gas for posting the transaction on L1.\nCalculate the data gas for posting the transaction on L1.\nCalculate the data gas for posting the transaction on L1.\nThe block was not found.\nA subscriber layer that collects traces and their log …\nThe L2 block was not found.\nAn TestBatchValidator implementation for testing.\nAn error for implementations of the BatchValidationProvider…\nThe storage for the collected traces.\nBlocks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the items in the storage that match the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the storage is empty.\nLocks the storage and returns the items.\nCreates a new []TestBatchValidator with the given origin …\nCreates a new collecting layer with the specified storage.\nBlocks\nShort circuit the block return to be the first block.\nThe storage for the collected traces.\nExtended APIs for the OP provider module.\nEngine API extension.\nExtension trait that gives access to Optimism engine API …\nReturns the list of Engine API methods supported by the …\nUpdates the execution layer client with the given fork …\nUpdates the execution layer client with the given fork …\nReturns the execution client version information.\nReturns the execution payload bodies by the given hash.\nReturns the execution payload bodies by the range starting …\nRetrieves an execution payload from a previously started …\nRetrieves an execution payload from a previously started …\nReturns the most recent version of the payload that is …\nSends the given payload to the execution layer client, as …\nSends the given payload to the execution layer client, as …\nSends the given payload to the execution layer client, as …\nSignals superchain information to the Engine\nRollup Node\nClient implementation for the <code>OpAdminApi</code> RPC API.\nServer trait implementation for the <code>OpAdminApi</code> RPC API.\nClient implementation for the <code>OpP2PApi</code> RPC API.\nServer trait implementation for the <code>OpP2PApi</code> RPC API.\nClient implementation for the <code>RollupNode</code> RPC API.\nServer trait implementation for the <code>RollupNode</code> RPC API.\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nCollects all the methods and subscriptions defined in the …\nGet the output root at a specific block.\nGet the output root at a specific block.\nGet the rollup configuration parameters.\nGet the rollup configuration parameters.\nGets the safe head at an L1 block height.\nGets the safe head at an L1 block height.\nGet the synchronization status.\nGet the synchronization status.\nGet the software version.\nGet the software version.\ntodo: should be IPNet?\ntodo: should be IPNet?\ntodo: should be IPNet?\ntodo: should be IPNet?\nReturns information of node\nReturns information of node\ntodo: should be IPNet?\ntodo: should be IPNet?\nOptimism specific transaction fields\nOP Transaction Receipt type\nAdditional fields for Optimism transaction receipts: …\nBuilder for <code>OpTypedTransaction</code>.\nOP Transaction type\nSets the access list for the transaction.\nBuilds <code>OpTypedTransaction</code> from this builder. See …\nOP rollup config types.\nDeposit nonce for deposit transactions.\nDeposit receipt version for deposit transactions.\nDeposit receipt version for deposit transactions …\nDeposit receipt version for deposit transactions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the gas limit for the transaction.\nOP types for genesis data.\nRegular eth transaction receipt including deposit receipts\nEthereum Transaction Types\nSets the input data for the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField indicating whether the transaction is a system …\nField indicating whether the transaction is a system …\nL1 block info of the transaction.\nL1 block info.\nSets the maximum fee per gas for the transaction.\nSets the maximum priority fee per gas for the transaction.\nThe ETH value to mint on L2\nThe ETH value to mint on L2\nNetwork RPC types\nSets the nonce for the transaction.\nOutput Types\nReceipt types for RPC\nContains the response for a safe head request.\nHash that uniquely identifies the source of the deposit.\nHash that uniquely identifies the source of the deposit.\nOp types related to sync.\nSets the recipient address for the transaction.\nOptimism specific types related to transactions.\nSets the transactions type for the transactions.\nSets the value (amount) for the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Optimism-specific base fee specification.\nContainer type for all Optimism specific fields in a …\nThe Optimism-specific genesis block specification.\nBase fee information\nbedrock block number\ncanyon hardfork timestamp\necotone hardfork timestamp\nEIP-1559 denominator\nEIP-1559 denominator after canyon\nEIP-1559 elasticity\nExtracts the Optimism specific fields from a genesis file. …\nExtract the Optimism-specific genesis info from a genesis …\nExtracts the Optimism base fee info by looking for the …\nfjord hardfork timestamp\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenesis information\ngranite hardfork timestamp\nholocene hardfork timestamp\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nregolith hardfork timestamp\nConnection to the peer is possible but not currently …\nRecent attempts to connect to the peer failed, indicating …\nAn active, open connection to the peer exists.\nRepresents the connectivity state of a peer in a network, …\nDirection represents the direction of a connection.\nInbound is for when the remote peer initiated the …\nConnection to the peer is limited; may not have full …\nNo current connection to the peer, and no recent history …\nOutbound is for when the local peer initiated the …\nUnknown is the default direction when the direction is not …\n0: “<code>NotConnected</code>”, 1: “Connected”, 2: “<code>CanConnect</code>…\n0: “Unknown”, 1: “Inbound” (if the peer contacted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnanosecond\nAn output response for Optimism Rollup.\nA reference to the L2 block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe output root hash.\nThe state root.\nThe status of the node sync.\nThe output version.\nThe withdrawal storage root.\nL1 block info extracted from inout of first transaction in …\nOP Transaction Receipt type\nAdditional fields for Optimism transaction receipts: …\nDeposit nonce for deposit transactions.\nDeposit receipt version for deposit transactions.\nReturns the argument unchanged.\nRegular eth transaction receipt including deposit receipts\nCalls <code>U::from(self)</code>.\nL1 base fee scalar. Applied to base fee to compute …\nL1 blob base fee.\nL1 blob base fee scalar. Applied to blob base fee to …\nL1 block info of the transaction.\nL1 block info.\nL1 fee for the transaction.\nL1 fee scalar for the transaction\nL1 base fee is the minimum price per unit of gas.\nL1 gas used.\nThe safe head response.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe L1 block.\nThe safe head.\nThe block reference for an L1 block.\nThe block reference for an L2 block.\nThe <code>SyncStatus</code> of an Optimism Rollup Node.\nThe current L1 block.\nThe current L1 finalized block.\nThe finalized L1 block ref.\nThe finalized L2 block ref.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe block hash.\nThe block hash.\nThe L1 head block ref.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe L1 origin.\nThe block number.\nThe block number.\nThe parent hash.\nThe parent hash.\nThe pending safe L2 block ref.\nThe L1 safe head block ref.\nThe safe L2 block ref.\nThe sequence number.\nThe timestamp.\nThe timestamp.\nThe unsafe L2 block ref.\nThe transaction is missing a required field.\nThe transaction’s signature is missing.\nOptimism specific transaction fields\nBuilder for <code>OpTypedTransaction</code>.\nThe transaction’s signature could not be converted to …\nOP Transaction type\nErrors that can occur when converting a Transaction to an …\nThe transaction type is not supported.\nDeposit receipt version for deposit transactions …\nDeposit receipt version for deposit transactions …\nReturns the argument unchanged.\nEthereum Transaction Types\nCalls <code>U::from(self)</code>.\nField indicating whether the transaction is a system …\nField indicating whether the transaction is a system …\nThe ETH value to mint on L2\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nHash that uniquely identifies the source of the deposit.\nThe snappy encoding is broken.\nThe SSZ encoding is broken.\nThe payload envelope is of invalid length.\nAn invalid length was encountered.\nThe signature is invalid.\nOptimism Payload Attributes with parent block reference.\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nOptimism execution payload envelope in network format.\nOptimism Payload Attributes\nErrors that can occur when decoding a payload envelope.\nRepresents the Keccak256 hash of the block\nFormatted Superchain Protocol Version.\nAn error that can occur when encoding or decoding a …\nThe Protocol Version V0 format. Encoded as 31 bytes with …\nSuperchain Signal information.\nFailed to convert slice to array.\nAn unsupported version was encountered.\nVersion-type 0.\nReturns the inner value of the ProtocolVersion enum if it …\nReturns the payload attributes.\nThe payload attributes.\nThe blobs, commitments, and proofs associated with the …\nThe blobs, commitments, and proofs associated with the …\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nDifferentiates forks and custom-builds of standard protocol\nDifferentiates forks and custom-builds of standard protocol\nVersion-type 0 byte decoding:\nDecode a payload envelope from a snappy-compressed byte …\nDecode a payload envelope from a snappy-compressed byte …\nDecode a payload envelope from a snappy-compressed byte …\nReturns a human-readable string representation of the …\nIf set, this sets the EIP-1559 parameters for the block.\nVersion-type 0 byte encoding:\nVersion-type 0 byte encoding:\nExecution payload V3\nExecution payload V4\nA list of opaque EIP-7685 requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the Keccak256 hash of a sequence of bytes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf set, this sets the exact gas limit the block produced …\nReturns the inner value of the ProtocolVersion enum\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the current batch is the last in its span.\nWhether the current batch is the last in its span.\nIncompatible API changes\nIncompatible API changes\nIdentifies additional functionality in backwards …\nIdentifies additional functionality in backwards …\nCreate a new OpAttributesWithParent instance.\nIf true, the no transactions are taken out of the tx-pool, …\nReturns the parent block reference.\nThe parent block reference.\nThe parent beacon block root.\nEcotone parent beacon block root\nEcotone parent beacon block root\nIdentifies backward-compatible bug-fixes\nIdentifies backward-compatible bug-fixes\nThe execution payload.\nThe payload attributes\nThe hash of the payload.\nIdentifies unstable versions that may not satisfy the above\nIdentifies unstable versions that may not satisfy the above\nThe recommended Supercain Protocol Version.\nThe minimum Supercain Protocol Version required.\nIntroduced in V3, this represents a suggestion from the …\nIntroduced in V3, this represents a suggestion from the …\nA signature for the payload.\nThe expected message that should be signed by the unsafe …\nTransactions is a field for rollups: the transactions list …\nThe expected length.\nThe length that was encountered.")