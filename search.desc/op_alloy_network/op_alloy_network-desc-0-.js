searchState.loadedDescShard("op_alloy_network", 0, "op-alloy-network\nTypes for a catch-all network.\nTransaction type for a catch-all network.\nBlock JSON-RPC response.\nThe JSON body of a block response.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA wallet capable of signing any transaction for the …\nHeader type\nThe network header type.\nHeader JSON-RPC response.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA wallet capable of signing any transaction for the given …\nContains the success value\nTypes for an Op-stack network.\nThe network receipt envelope type.\nReceipt JSON-RPC response.\nThe JSON body of a transaction receipt.\nSigner error.\nTransaction type\nA Transaction builder for a network.\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction JSON-RPC response. Aggregates transaction data …\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nApply a function to the builder, returning the modified …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nEIP-7702 Authorization list.\nGet the EIP-7702 authorization list for the transaction.\nBase fee per unit of gas (If EIP-1559 is supported)\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCoinbase/Miner of the block\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nInstantiate a custom error.\nGet the default signer.\nGet the default signer address. This address should be used\nDifficulty of the block\nEffective gas price.\nEIP-2718 traits.\nThe error that occurred.\nExtra data\nAddress of the sender.\nSender of the transaction\nGet the sender for the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gas limit for the transaction.\nGas limit of the block\nGet the legacy gas price for the transaction.\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nReturn true if the signer contains a credential for the …\nBlock hash\nBlock header\nGet the input data for the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the <code>to</code> field to a create call.\nConvert the error into an unbuilt transaction error.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nGet the max priority fee per gas for the transaction.\nMix hash of the block\nCreate a new signer with the given signer as the default …\nBlob fee for the next block (if EIP-4844 is supported)\nGet the nonce for the transaction.\nBlock number\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nThe original request that failed to build.\nSets the EIP-2930 access list.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the signer for the given address.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nBlock timestamp\nAddress of the receiver.\nRecipient of the transaction. Returns <code>None</code> if transaction …\nGet the recipient for the transaction.\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nHash of the transaction\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nEncode the transaction according to EIP-2718 rules. First …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie. This …\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nBlock JSON-RPC response.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nHeader type\nHeader JSON-RPC response.\nReceipt JSON-RPC response.\nTransaction type\nTransaction JSON-RPC response. Aggregates transaction data …\nSpecial case for uncle response.\nFallibly cast to a slice of hashes.\nFallibly cast to a slice of transactions.\nEIP-7702 Authorization list.\nBase fee per unit of gas (If EIP-1559 is supported)\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nCoinbase/Miner of the block\nAddress of the created contract, or <code>None</code> if the …\nConverts <code>self</code> into <code>Hashes</code>.\nReturns the cumulative gas used at this receipt.\nDifficulty of the block\nEffective gas price.\nExtra data\nAddress of the sender.\nSender of the transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas limit of the block\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nBlock hash\nReturns an iterator over references to the transaction …\nBlock header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into <code>Hashes</code>.\nReturns an iterator over the transactions (if any). This …\nWhether the block has no transactions.\nReturns true if the enum variant is used for full …\nCheck if the enum variant is used for hashes.\nReturns true if the enum variant is used for an uncle …\nReturns an iterator over the transaction hashes.\nReturns the number of transactions.\nMax BaseFeePerGas the user is willing to pay. For …\nMix hash of the block\nBlob fee for the next block (if EIP-4844 is supported)\nBlock number\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nBlock timestamp\nAddress of the receiver.\nRecipient of the transaction. Returns <code>None</code> if transaction …\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nHash of the transaction\nReturns an iterator over the transactions (if any). This …\nReturns an instance of BlockTransactions with the Uncle …")