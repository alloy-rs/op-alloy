searchState.loadedDescShard("op_alloy_consensus", 0, "op-alloy-consensus\nIdentifier for an Optimism deposit transaction\nReceipt envelope with type flag 126, containing a deposit …\nOptimism Deposit transaction type.\nA <code>TxDeposit</code> tagged with type 0x7E.\nOptimism deposit transaction\nSource domains for deposit transactions.\nSource domain identifiers for deposit transactions.\nA trait representing a deposit transaction with specific …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nEIP-1559 transaction type.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nReceipt envelope with type flag 1, containing a EIP-2930 …\nEIP-2930 transaction type.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nReceipt envelope with type flag 4, containing a EIP-7702 …\nEIP-7702 transaction type.\nA <code>TxEip7702</code> tagged with type 4.\nEIP-7702 transaction\nA L1 info deposit source.\nA L1 info deposit source.\nA L1 info deposit transaction source.\nReceipt envelope with no type flag.\nLegacy transaction type.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nAn Optimism block type.\nReceipt containing result of transaction execution.\n<code>OpDepositReceipt</code> with calculated bloom filter, modified …\nReceipt envelope, as defined in EIP-2718, modified for OP …\nThe Ethereum EIP-2718 Transaction Envelope, modified for …\nReceipt is the result of a transaction execution.\nOptimism <code>TransactionType</code> flags as specified in EIPs 2718, …\nThe TypedTransaction enum represents all Ethereum …\nDeposit transactions, also known as deposits are initiated …\nAn upgrade deposit source.\nAn upgrade deposit source.\nAn upgrade deposit transaction source.\nA user deposit source.\nA user deposit source.\nA deposit transaction source.\nOptimism Block Type.\nBlock body.\nReturns the deposit nonce of the transaction.\nDeposit nonce for Optimism deposit transactions\nReturns the deposit receipt version of the transaction.\nDeposit receipt version for Optimism deposit transactions\nThe address of the sender account.\nThe gas limit for the L2 transaction.\nOP Stack Hardfork Transaction Updates\nBlock header.\nThe inner receipt type.\nInput has two uses depending if transaction is Create or …\nThe intent.\nChecks if the transaction is a deposit transaction.\nIndicates whether the transaction is exempt from the L2 …\nField indicating if this transaction is exempt from the L2 …\nThe L1 block hash.\nThe L1 block hash.\nThe log index.\nThe bloom filter.\nReturns the optional mint value of the deposit transaction.\nThe ETH value to mint on L2.\nReceipt types for Optimism.\nThe receipt.\nThe sequence number.\nBincode-compatible serde implementations for consensus …\nReturns the hash that uniquely identifies the source of …\nHash that uniquely identifies the source of the deposit.\nThe address of the recipient account, or the null …\nTramsaction types for Optimism.\nThe ETH value to send to the recipient account.\nAn Optimism block type.\nBlock body.\nBlock header.\nOptimism Hardforks\nUpgradeTo Function 4Byte Signature\nModule containing a Transaction builder for the Ecotone …\nConstructs the Ecotone network upgrade transactions.\nModule containing a Transaction builder for the Fjord …\nConstructs the Fjord network upgrade transactions.\nReturns the argument unchanged.\nReturns the fjord gas price oracle deployment bytecode.\nCalls <code>U::from(self)</code>.\nTurns the given address into calldata for the <code>upgradeTo</code> …\nEIP-4788 From Address\nThe Enable Ecotone Input Method 4Byte Signature\nThe Gas Price Oracle Address This is computed by using …\nThe Gas Price Oracle Deployer Address\nL1 Block Deployer Address\nThe new L1 Block Address This is computed by using …\nThe UpdgradeTo Function Signature\nFjord Gas Price Oracle source.\nInput data for setting the Fjord Gas Price Oracle.\nUpgradeDepositSource for setting the Fjord Gas Price …\nFjord Gas Price Oracle address.\nThe Gas Price Oracle Address This is computed by using …\nFjord Gas Price Oracle Deployer Address.\nThe L1 Info Depositer Address.\nThe Set Fjord Four Byte Method Signature.\nUpgradeDepositSource for the source code update to the …\nReceipt is the result of a transaction execution.\nReturns the deposit nonce of the transaction.\nReturns the deposit receipt version of the transaction.\nReceipt envelope types for Optimism.\nTransaction receipt types for Optimism.\nReceipt envelope with type flag 126, containing a deposit …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nReceipt envelope with no type flag.\nReceipt envelope, as defined in EIP-2718, modified for OP …\nReturns the deposit receipt if it is a deposit receipt.\nReturns the deposit receipt if it is a deposit receipt.\nReturn the inner receipt. Currently this is infallible, …\nReturn the receipt’s bloom.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturn the receipt’s deposit_nonce if it is a deposit …\nReturn the receipt’s deposit version if it is a deposit …\nReturns the argument unchanged.\nCreates a new <code>OpReceiptEnvelope</code> from the given parts.\nGet the length of the inner receipt in the 2718 encoding.\nCalls <code>U::from(self)</code>.\nReturn true if the transaction was successful.\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt’s bloom.\nCalculate the length of the rlp payload of the network …\nReturns the success status of the receipt’s transaction.\nReturn the <code>OpTxType</code> of the inner receipt.\nReceipt containing result of transaction execution.\n<code>OpDepositReceipt</code> with calculated bloom filter, modified …\nCalculates <code>Log</code>’s bloom filter. this is slow operation …\nDecodes the receipt payload\nDeposit nonce for Optimism deposit transactions\nDeposit receipt version for Optimism deposit transactions\nEncodes the receipt data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe inner receipt type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the structure, returning the receipt and the bloom …\nConsume the structure, returning only the receipt\nThe bloom filter.\nCreate new OpDepositReceiptWithBloom\nThe receipt.\nReturns the rlp header for the receipt payload.\nCalculates the bloom filter for the receipt and returns …\nBincode-compatible <code>super::TxDeposit</code> serde implementation.\nA trait representing a deposit transaction with specific …\nDeposit Transaction type.\nChecks if the transaction is a deposit transaction.\nIndicates whether the transaction is exempt from the L2 …\nReturns the optional mint value of the deposit transaction.\nBincode-compatible serde implementations for transaction …\nTypes for identifying the deposit source.\nReturns the hash that uniquely identifies the source of …\nDeposit transactions, also known as deposits are initiated …\nDecodes the inner TxDeposit fields from RLP bytes.\nEncodes only the transaction’s fields into the desired …\nInner encoding function that is used for both rlp <code>Encodable</code>…\nOutput the length of the RLP signed transaction encoding.\nOutputs the length of the transaction’s fields, without …\nReturns the argument unchanged.\nThe address of the sender account.\nThe gas limit for the L2 transaction.\nInput has two uses depending if transaction is Create or …\nCalls <code>U::from(self)</code>.\nField indicating if this transaction is exempt from the L2 …\nThe ETH value to mint on L2.\nBincode-compatible <code>TxDeposit</code> serde implementation.\nReturns the signature for the optimism deposit …\nCalculates a heuristic for the in-memory size of the …\nHash that uniquely identifies the source of the deposit.\nThe address of the recipient account, or the null …\nGet the transaction type\nThe ETH value to send to the recipient account.\nBincode-compatible <code>super::TxDeposit</code> serde implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList of all variants.\nIdentifier for an Optimism deposit transaction\nOptimism Deposit transaction type.\nA <code>TxDeposit</code> tagged with type 0x7E.\nEIP-1559 transaction type.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-2930 transaction type.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-7702 transaction type.\nA <code>TxEip7702</code> tagged with type 4.\nLegacy transaction type.\nAn untagged <code>TxLegacy</code>.\nThe Ethereum EIP-2718 Transaction Envelope, modified for …\nOptimism <code>TransactionType</code> flags as specified in EIPs 2718, …\nReturns the <code>TxDeposit</code> variant if the transaction is a …\nReturns the <code>TxEip1559</code> variant if the transaction is an …\nReturns the <code>TxEip2930</code> variant if the transaction is an …\nReturns the <code>TxLegacy</code> variant if the transaction is a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the length of the inner txn, <strong>without a type byte</strong>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the transaction is a deposit transaction.\nReturns true if the transaction is an EIP-1559 transaction.\nReturns true if the transaction is an EIP-2930 transaction.\nReturns true if the transaction is a legacy transaction.\nReturns true if the transaction is a system transaction.\nReturn the RLP payload length of the network-serialized …\nReturn the <code>OpTxType</code> of the inner txn.\nSource domains for deposit transactions.\nSource domain identifiers for deposit transactions.\nA L1 info deposit source.\nA L1 info deposit source.\nA L1 info deposit transaction source.\nAn upgrade deposit source.\nAn upgrade deposit source.\nAn upgrade deposit transaction source.\nA user deposit source.\nA user deposit source.\nA deposit transaction source.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe intent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe L1 block hash.\nThe L1 block hash.\nThe log index.\nCreates a new L1InfoDepositSource.\nCreates a new UserDepositSource.\nCreates a new UpgradeDepositSource.\nThe sequence number.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nOptimism deposit transaction\nEIP-1559 transaction\nEIP-2930 transaction\nEIP-7702 transaction\nLegacy transaction\nThe TypedTransaction enum represents all Ethereum …\nReturn the inner deposit transaction if it exists.\nReturn the inner EIP-1559 transaction if it exists.\nReturn the inner EIP-2930 transaction if it exists.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the inner legacy transaction if it exists.\nReturn the <code>OpTxType</code> of the inner txn.")