searchState.loadedDescShard("op_alloy_protocol", 0, "op-alloy-protocol\nThe batch is valid and should be processed\nError decoding an Alloy RLP\nA Batch.\nAn error decoding a batch.\nBatchTransaction is a set of Frames that can be Into::into …\nThe Batch Type.\nDescribes the functionality of a data source that fetches …\nBatch Validity\nA batch with its inclusion block.\nThe bit field is too long\nFailed to decode block count\nBlock Header Info\nFailed to decode the L1BlockInfoTx from the deposit …\nFailed to decode block tx counts\nCHANNEL_ID_LENGTH is the length of the channel ID.\nA Channel is a set of batches that are split into at least …\nThe channel is closed.\nAn error returned when adding a frame to a channel.\nChannelId is an opaque identifier for a channel.\nThe version of the derivation pipeline.\nFrame data length mismatch.\nThe frame data is too large.\nThe frame data is too short.\nDecoding errors\nThe batch is invalid now and in the future, unless we …\nEIP-1559 transaction data.\nEIP-1559 parameter decoding error.\nEIP-2930 transaction data.\nEmpty buffer\nEmpty Span Batch\nEmpty transactions.\nThe error type for the BatchValidationProvider.\nFJORD_MAX_RLP_BYTES_PER_CHANNEL is the maximum amount of …\nCount the tagging info as 200 in terms of buffer size.\nThe first payload transaction is not a deposit transaction.\nA channel frame is a segment of a channel’s data.\nThe frame number is beyond the end frame.\nA frame decoding error.\nError parsing the frame data.\nThe frame id does not match the channel id.\nAn iterator over encoded frames.\nThe frame number is already in the channel.\nFrame parsing error.\nAn error that can occur when converting an OpBlock to an …\nThe batch may be valid, but cannot be processed yet and …\nError decoding the frame data length.\nThe genesis block hash does not match the expected value.\nInvalid genesis hash.\nError decoding the frame id.\nError decoding the frame number.\nInvalid transaction data\nInvalid transaction signature\nInvalid transaction type\nInvalid transaction type.\nL1 Info error\nFailed to decode L1 origin check\nFailed to decode L1 origin number\nL2 Block Header Info\nLegacy transaction data.\nFrames cannot be larger than 1MB.\nMAX_RLP_BYTES_PER_CHANNEL is the maximum amount of bytes …\nMAX_SPAN_BATCH_ELEMENTS is the maximum number of blocks, …\nThe L2 block is missing the L1 info deposit transaction.\nMissing L1 origin\nMissing system config in genesis block.\nNo frames to parse.\nNo frames decoded.\nAn error encountered during OpBlock conversion.\nFailed to decode parent check\nIntroduced in Holocene, a special variant of the <code>Drop</code> …\nRaw Span Batch\nFailed to decode relative timestamp\nThe single batch type identifier.\nThe span batch type identifier.\nSingle Batch.\nA single batch\nRepresents a single batch: a single encoded L2 block\nSpan Batch.\nSpan Batches\nThe span batch contains the input to build a span of L2 …\nType for span batch bits.\nThe transaction data for an EIP-1559 transaction within a …\nThe transaction data for an EIP-2930 transaction within a …\nA single batch element is similar to the SingleBatch type …\nSpan Batch Errors\nError decoding a span batch\nThe transaction data for a legacy transaction within a …\nSpan Batch Payload\nSpan Batch Prefix\nThe typed transaction data for a transaction within a span …\nThis struct contains the decoded information for …\nDecoding Error\nThe span batch is too big\nFailed to decode the first transaction into an OpTxEnvelope…\nFailed to decode transaction nonces\nMismatch in length between the transaction type and …\nWe are lacking L1 information until we can proceed batch …\nThe first payload transaction has an unexpected type.\nUnsupported derivation version.\nAccess list, used to pre-warm storage slots through static …\nAccess list, used to pre-warm storage slots through static …\nContains batch types.\nThe batch\nTransaction Types\nList of block input in derived form\nBlock Types for Optimism.\nReturns the OpBlock for a given number.\nNumber of L2 block in the span\nThis module contains the L1BlockInfoTx type, and various …\nThe base BlockInfo\nList of transaction counts for each L2 block\nCaching - block tx counts\nChain ID\nChannel Types\nTrue if the last frame has been buffered\nThe contract creation bits, standard span-batch bitlist.\nTransaction calldata.\nTransaction calldata.\nTransaction calldata.\nThe data within the frame.\nContains deposit transaction types and helper methods.\nThe block hash of the first L1 block in the epoch\nThe epoch number of the L1 block\nThe batch epoch number. Same as the first L1 block number …\nEstimated memory size, used to drop the channel if we have …\nThis module contains the L1 block fee calculation function.\nFrame Types\nThe frames in the batch.\nThe gas price of the transaction.\nThe gas price of the transaction.\nGenesis block timestamp\nThe block hash\nThe highest frame number that has been ingested\nThe highest L1 inclusion block that a frame was included in\nThe unique idetifier for the frame.\nThe unique identifier for this channel\nThe inclusion block\nStore a map of frame number to frame for constant time …\nWhether or not the frame is the last in the sequence.\nChecks if the signature of the passed TxEnvelope is …\nAn iterator over encoded frames.\nThe L1 origin BlockNumHash\nFirst 20 bytes of the last block’s L1 origin hash\nFirst 20 bytes of the last block’s L1 origin hash\nL1 origin number\nReturns the L2BlockInfo given a block number.\nThe frame number of the frame where <code>is_last</code> is true No …\nTotal legacy transaction count in the span batch.\nMaximum fee per gas.\nMaximum priority fee per gas.\nThe block number\nThe number of the frame.\nThe block that the channel is currently open at\nStandard span-batch bitlist of blockCount bits. Each bit …\nCaching - origin bits\nFirst 20 bytes of the first block’s parent hash\nFirst 20 bytes of the first block’s parent hash\nBlock hash of the previous L2 block. <code>B256::ZERO</code> if it has …\nThe parent block hash\nThe span batch payload\nThe span batch prefix\nThe protected bits, standard span-batch bitlist.\nReads transaction data from a reader.\nRelative timestamp of the first block\nThe sequence number of the L2 block\nThe size of the potential transaction.\nReturns if the given <code>value</code> is a deposit transaction.\nTest utilities for the protocol crate.\nThe timestamp of the L2 block\nThe L2 block timestamp of this batch\nThe block timestamp\nConverts the OpBlock to a partial SystemConfig.\nThe total number of transactions in a span batch. Must be …\nThe transactions in the L2 block\nThe L2 block transactions in this batch\nThe transaction data.\nThe transaction gas limits.\nThe transaction nonces\nThe transaction signatures.\nThe <code>to</code> addresses of the transactions.\nThe types of the transactions.\nTransactions encoded in SpanBatch specs\nCaching - span batch txs\nUtility methods used by protocol types.\nThe ETH value of the transaction.\nThe ETH value of the transaction.\nThe ETH value of the transaction.\nThe y parity bits, standard span-batch bitlist.\nModule for working with span batch bits.\nModule containing the core Batch enum.\nSpan Batch Element\nSpan Batch Errors\nModule containing the BatchWithInclusionBlock struct.\nRaw Span Batch Payload\nRaw Span Batch Prefix\nModule containing the RawSpanBatch struct.\nThis module contains the SingleBatch type.\nThe Span Batch Type\nTraits for working with protocol types.\nThis module contains the SpanBatchTransactions type and …\nContains all the Span Batch Transaction Data types.\nBatch Types\nContains the BatchValidity and its encodings.\nType for span batch bits.\nCalculates the bit length of the SpanBatchBits bitfield.\nDecodes a standard span-batch bitlist from a reader. The …\nEncodes a standard span-batch bitlist. The bitlist is …\nReturns the argument unchanged.\nGet a bit from the SpanBatchBits bitlist.\nCalls <code>U::from(self)</code>.\nCreates a new span batch bits.\nResizes an array from the right. Useful for big-endian …\nSets a bit in the SpanBatchBits bitlist.\nA Batch.\nA single batch\nSpan Batches\nAttempts to decode a batch from a reader.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the timestamp for the batch.\nMAX_SPAN_BATCH_ELEMENTS is the maximum number of blocks, …\nA single batch element is similar to the SingleBatch type …\nThe epoch number of the L1 block\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe timestamp of the L2 block\nThe transactions in the L2 block\nError decoding an Alloy RLP\nAn error decoding a batch.\nThe bit field is too long\nFailed to decode block count\nFailed to decode block tx counts\nDecoding errors\nEmpty buffer\nEmpty Span Batch\nInvalid transaction data\nInvalid transaction signature\nInvalid transaction type\nFailed to decode L1 origin check\nFailed to decode L1 origin number\nMissing L1 origin\nFailed to decode parent check\nFailed to decode relative timestamp\nSpan Batch Errors\nError decoding a span batch\nDecoding Error\nThe span batch is too big\nFailed to decode transaction nonces\nMismatch in length between the transaction type and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA batch with its inclusion block.\nThe batch\nValidates the batch can be applied on top of the specified …\nReturns the argument unchanged.\nThe inclusion block\nCalls <code>U::from(self)</code>.\nCreates a new batch with inclusion block.\nSpan Batch Payload\nNumber of L2 block in the span\nList of transaction counts for each L2 block\nDecode a block count from a reader.\nDecode block transaction counts from a reader.\nDecodes the origin bits from a reader.\nDecodes a SpanBatchPayload from a reader.\nDecode transactions from a reader.\nEncode the block count into a writer.\nEncode the block transaction counts into a writer.\nEncode the origin bits into a writer.\nEncodes a SpanBatchPayload into a writer.\nEncode the transactions into a writer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStandard span-batch bitlist of blockCount bits. Each bit …\nTransactions encoded in SpanBatch specs\nSpan Batch Prefix\nDecodes the L1 origin check from a reader.\nDecodes the L1 origin number from a reader.\nDecodes the parent check from a reader.\nDecodes a SpanBatchPrefix from a reader.\nDecodes the relative timestamp from a reader.\nEncodes the SpanBatchPrefix into a writer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFirst 20 bytes of the last block’s L1 origin hash\nL1 origin number\nFirst 20 bytes of the first block’s parent hash\nRelative timestamp of the first block\nRaw Span Batch\nDecodes the RawSpanBatch from a reader.]\nConverts a RawSpanBatch into a SpanBatch, which has a list …\nEncodes the RawSpanBatch into a writer.\nReturns the argument unchanged.\nReturns the batch type\nCalls <code>U::from(self)</code>.\nThe span batch payload\nThe span batch prefix\nRepresents a single batch: a single encoded L2 block\nChecks if the batch is valid.\nValidate the batch timestamp.\nReturns the BlockNumHash of the batch.\nThe block hash of the first L1 block in the epoch\nThe batch epoch number. Same as the first L1 block number …\nReturns the argument unchanged.\nIf any transactions are empty or deposited transaction …\nCalls <code>U::from(self)</code>.\nBlock hash of the previous L2 block. <code>B256::ZERO</code> if it has …\nThe L2 block timestamp of this batch\nThe L2 block transactions in this batch\nThe span batch contains the input to build a span of L2 …\nAppend a SingleBatch to the SpanBatch. Updates the L1 …\nList of block input in derived form\nCaching - block tx counts\nChain ID\nChecks if the span batch is valid.\nChecks the validity of the batch’s prefix.\nChecks if the first 20 bytes of the given hash match the …\nChecks if the first 20 bytes of the given hash match the …\nReturns the final timestamp for the last batch in the span.\nReturns the argument unchanged.\nGenesis block timestamp\nConverts all SpanBatchElements after the L2 safe head to …\nCalls <code>U::from(self)</code>.\nFirst 20 bytes of the last block’s L1 origin hash\nCaching - origin bits\nFirst 20 bytes of the first block’s parent hash\nPeek at the <code>n</code>th-to-last last element in the batch.\nReturns the epoch number for the first batch in the span.\nReturns the starting timestamp for the first batch in the …\nCaching - span batch txs\nDescribes the functionality of a data source that fetches …\nThe error type for the BatchValidationProvider.\nReturns the OpBlock for a given number.\nReturns the L2BlockInfo given a block number.\nThis struct contains the decoded information for …\nAdd raw transactions into the SpanBatchTransactions.\nThe contract creation bits, standard span-batch bitlist.\nReturns the number of contract creation transactions in …\nDecodes the SpanBatchTransactions from a reader.\nDecode the contract creation bits from a reader.\nDecode the protected bits from a reader.\nDecode the transaction data from a reader.\nDecode the transaction gas limits from a reader.\nDecode the transaction nonces from a reader.\nDecode the transaction signatures from a reader (excluding …\nDecode the <code>to</code> addresses of the transactions from a reader.\nDecode the y parity bits from a reader.\nEncodes the SpanBatchTransactions into a writer.\nEncode the contract creation bits into a writer.\nEncode the protected bits into a writer.\nEncode the transaction data into a writer.\nEncode the transaction gas limits into a writer.\nEncode the transaction nonces into a writer.\nEncode the transaction signatures into a writer (excluding …\nEncode the <code>to</code> addresses of the transactions into a writer.\nEncode the y parity bits into a writer.\nReturns the argument unchanged.\nRetrieve all of the raw transactions from the …\nCalls <code>U::from(self)</code>.\nTotal legacy transaction count in the span batch.\nThe protected bits, standard span-batch bitlist.\nRecover the <code>v</code> values of the transaction signatures.\nThe total number of transactions in a span batch. Must be …\nThe transaction data.\nThe transaction gas limits.\nThe transaction nonces\nThe transaction signatures.\nThe <code>to</code> addresses of the transactions.\nThe types of the transactions.\nThe y parity bits, standard span-batch bitlist.\nThis module contains the eip1559 transaction data type for …\nThis module contains the eip2930 transaction data type for …\nThis module contains the legacy transaction data type for …\nThis module contains the top level span batch transaction …\nThe transaction data for an EIP-1559 transaction within a …\nAccess list, used to pre-warm storage slots through static …\nTransaction calldata.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum fee per gas.\nMaximum priority fee per gas.\nConverts SpanBatchEip1559TransactionData into an …\nThe ETH value of the transaction.\nThe transaction data for an EIP-2930 transaction within a …\nAccess list, used to pre-warm storage slots through static …\nTransaction calldata.\nReturns the argument unchanged.\nThe gas price of the transaction.\nCalls <code>U::from(self)</code>.\nConverts SpanBatchEip2930TransactionData into a …\nThe ETH value of the transaction.\nThe transaction data for a legacy transaction within a …\nTransaction calldata.\nReturns the argument unchanged.\nThe gas price of the transaction.\nCalls <code>U::from(self)</code>.\nConverts SpanBatchLegacyTransactionData into a OpTxEnvelope…\nThe ETH value of the transaction.\nEIP-1559 transaction data.\nEIP-2930 transaction data.\nLegacy transaction data.\nThe typed transaction data for a transaction within a span …\nDecodes a typed transaction into a SpanBatchTransactionData…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts the SpanBatchTransactionData into a OpTxEnvelope.\nReturns the transaction type of the …\nThe Batch Type.\nThe single batch type identifier.\nThe span batch type identifier.\nSingle Batch.\nSpan Batch.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe batch is valid and should be processed\nBatch Validity\nThe batch is invalid now and in the future, unless we …\nThe batch may be valid, but cannot be processed yet and …\nIntroduced in Holocene, a special variant of the <code>Drop</code> …\nWe are lacking L1 information until we can proceed batch …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the batch is accepted.\nReturns whether the batch is dropped.\nReturns whether the batch is future.\nReturns whether the batch is outdated.\nBatchTransaction is a set of Frames that can be Into::into …\nThe frames in the batch.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns if the transaction has reached the max frame count.\nReturns the size of the transaction.\nThe size of the potential transaction.\nReturns the BatchTransaction as a Bytes.\nBlock Header Info\nFailed to decode the L1BlockInfoTx from the deposit …\nThe first payload transaction is not a deposit transaction.\nAn error that can occur when converting an OpBlock to an …\nThe genesis block hash does not match the expected value.\nL2 Block Header Info\nThe L2 block is missing the L1 info deposit transaction.\nFailed to decode the first transaction into an OpTxEnvelope…\nThe first payload transaction has an unexpected type.\nThe base BlockInfo\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an L2BlockInfo from a given OpBlock and …\nThe block hash\nReturns the block ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe L1 origin BlockNumHash\nInstantiates a new BlockInfo.\nInstantiates a new L2BlockInfo.\nThe block number\nThe parent block hash\nThe sequence number of the L2 block\nThe block timestamp\nFailed to parse the base fee scalar.\nA Bedrock L1 info transaction\nAn error type for parsing L1 block info transactions.\nAn Ecotone L1 info transaction\nFailed to parse the EIP-1559 denominator.\nFailed to parse the EIP-1559 elasticity parameter.\nFailed to parse the L1 blob base fee scalar.\nRepresents the fields within a Bedrock L1 block info …\nRepresents the fields within an Ecotone L1 block info …\nThe L1BlockInfoTx enum contains variants for the different …\nThe address of the L1 Block contract\nThe depositor address of the L1 info transaction\nThe length of an L1 info transaction in Bedrock.\nThe length of an L1 info transaction in Ecotone.\nThe 4 byte selector of the “…\nThe 4 byte selector of “setL1BlockValuesEcotone()”\nThe type byte identifier for the L1 scalar format in …\nThe system transaction gas limit post-Regolith\nThe current L1 origin block’s basefee\nThe current L1 origin block’s basefee\nThe fee scalar for L1 data\nReturns the batcher address for the info transaction\nThe address of the batch submitter\nThe address of the batch submitter\nThe current blob base fee on L1\nThe fee scalar for L1 blobspace data\nReturns the block hash for the L1BlockInfoTx.\nThe current L1 origin block’s hash\nThe current L1 origin block’s hash\nDecodes the L1BlockInfoEcotone object from ethereum …\nDecodes the L1BlockInfoBedrock object from ethereum …\nDecodes the L1BlockInfoEcotone object from ethereum …\nEncodes the L1BlockInfoTx object into Ethereum transaction …\nEncodes the L1BlockInfoBedrock object into Ethereum …\nEncodes the L1BlockInfoEcotone object into Ethereum …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the L1 BlockNumHash for the info transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the L1 fee overhead for the info transaction. …\nThe fee overhead for L1 data\nThe fee scalar for L1 data\nThe current L1 origin block number\nThe current L1 origin block number\nReturns the sequence number for the info transaction\nThe current sequence number\nThe current sequence number\nThe current L1 origin block’s timestamp\nThe current L1 origin block’s timestamp\nCreates a new L1BlockInfoTx from the given information.\nCreates a new L1BlockInfoTx from the given information and …\nCHANNEL_ID_LENGTH is the length of the channel ID.\nA Channel is a set of batches that are split into at least …\nThe channel is closed.\nAn error returned when adding a frame to a channel.\nChannelId is an opaque identifier for a channel.\nFJORD_MAX_RLP_BYTES_PER_CHANNEL is the maximum amount of …\nThe frame number is beyond the end frame.\nThe frame id does not match the channel id.\nThe frame number is already in the channel.\nMAX_RLP_BYTES_PER_CHANNEL is the maximum amount of bytes …\nAdd a frame to the channel.\nTrue if the last frame has been buffered\nEstimated memory size, used to drop the channel if we have …\nReturns all of the channel’s Frames concatenated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest frame number that has been ingested\nThe highest L1 inclusion block that a frame was included in\nReturns the current ChannelId for the channel.\nThe unique identifier for this channel\nStore a map of frame number to frame for constant time …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the channel is empty.\nReturns <code>true</code> if the channel is ready to be read.\nThe frame number of the frame where <code>is_last</code> is true No …\nReturns the number of frames ingested.\nCreate a new Channel with the given ChannelId and BlockInfo…\nThe block that the channel is currently open at\nReturns the block number of the L1 block that contained …\nReturns the estimated size of the channel including Frame …\nDeposit log event abi signature.\nDeposit event abi hash.\nThe initial version of the deposit event log.\nAn op_alloy_consensus::TxDeposit validation error.\nSource domains for deposit transactions.\nSource domain identifiers for deposit transactions.\nFailed to decode the <code>from</code> field of the deposit event (the …\nFailed to decode the deposit gas value.\nIncomplete opaqueData slice header (incomplete length).\nInvalid opaque data content length.\nInvalid opaque data content offset.\nInvalid deposit event selector. Expected: B256 (deposit …\nAn invalid deposit version.\nA L1 info deposit source.\nA L1 info deposit source.\nA L1 info deposit transaction source.\nFailed to decode the deposit mint value.\nOpaque data length exceeds the deposit log event data …\nOpaque data with padding exceeds the specified data length.\nFailed to decode the <code>to</code> field of the deposit event (the …\nThe log data is not aligned to 32 bytes.\nUnexpected opaque data length\nUnexpected number of deposit event log topics.\nAn upgrade deposit source.\nAn upgrade deposit source.\nAn upgrade deposit transaction source.\nA user deposit source.\nA user deposit source.\nA deposit transaction source.\nDerives a deposit transaction from an EVM log event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe intent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe L1 block hash.\nThe L1 block hash.\nThe log index.\nCreates a new UserDepositSource.\nCreates a new L1InfoDepositSource.\nCreates a new UpgradeDepositSource.\nThe sequence number.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nReturns the source hash.\nUnmarshals a deposit transaction from the opaque data.\nCost per byte in calldata\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the gas cost of a transaction based on L1 block …\nCalculate the data gas for posting the transaction on L1.\nCalculate the data gas for posting the transaction on L1.\nCalculate the data gas for posting the transaction on L1.\nThe version of the derivation pipeline.\nFrame data length mismatch.\nThe frame data is too large.\nThe frame data is too short.\nCount the tagging info as 200 in terms of buffer size.\nA channel frame is a segment of a channel’s data.\nA frame decoding error.\nError parsing the frame data.\nFrame parsing error.\nError decoding the frame data length.\nError decoding the frame id.\nError decoding the frame number.\nFrames cannot be larger than 1MB.\nNo frames to parse.\nNo frames decoded.\nUnsupported derivation version.\nThe data within the frame.\nDecode a frame from a byte vector.\nEncode the frame into a byte vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique idetifier for the frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the frame is the last in the sequence.\nCreates a new Frame.\nThe number of the frame.\nParses a single frame from the given data at the given …\nParse the on chain serialization of frame(s) in an L1 …\nCalculates the size of the frame + overhead for storing …\nAn iterator over encoded frames.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new FrameIter.\nThe block was not found.\nA subscriber layer that collects traces and their log …\nThe L2 block was not found.\nAn TestBatchValidator implementation for testing.\nAn error for implementations of the BatchValidationProvider…\nThe storage for the collected traces.\nBlocks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the items in the storage that match the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the storage is empty.\nLocks the storage and returns the items.\nCreates a new []TestBatchValidator with the given origin …\nCreates a new collecting layer with the specified storage.\nBlocks\nShort circuit the block return to be the first block.\nThe storage for the collected traces.\nEIP-1559 parameter decoding error.\nEmpty transactions.\nInvalid genesis hash.\nInvalid transaction type.\nL1 Info error\nMissing system config in genesis block.\nAn error encountered during OpBlock conversion.\nReturns the length of the data after compression through …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the signature of the passed TxEnvelope is …\nReads transaction data from a reader.\nReturns if the given <code>value</code> is a deposit transaction.\nConverts the OpBlock to a partial SystemConfig.")